1. 설치

    1) React-router-dom
        npm i react-router-dom@5
        npm i --save-dev @types/react-router-dom@5   // 이게 타입스크립트

    2) react-redux
        npm install react-redux

    3) redux-toolkit
        npm install @reduxjs/toolkit

    4) react-transition-group
        npm i --save-dev @types/react-transition-group // 이게 타입스크립트꺼인듯

    5) react-animation-on-scroll
        npm install react-animation-on-scroll --save
        npm install --save animate.css

2. 우선 UI 부터 전부 작업 시작

    1) "mainpage 작업"
        Video

    2) "header footer 작업"

3. 스크롤 애니메이션 작업 완

4. MainPage UI 완료
    react-animation-on-scroll 과 react-transition-group 을 적절히 사용한다.

5. HOW-to-work Page 작성

    [일단 파츠(부위)별 컴포넌트를 전부 만든다.]

        "HowToWorkOut Page" 는
        "Choose Part 컴포넌트" , "Descripion 컴포넌트" 로 구성

        "Choose Part 컴포넌트" 는 기본적으로 "디폴트 Description" 이 같이 렌더
        "Choose Part 컴포넌트" 에서 "해당 부위의 버튼을 누르면"
        " 해당 부위의 Description"이 "렌더된다."

        [리덕스]를 이용하여, 리덕스를 이용하여, State 를 만들어서, 
            "Choose Part 컴포넌트"에서, 버튼을 누르면,  "HowToWorkOut Page" 에서, 받아, 다른 것을 렌더하는 형식으로 하자

        [ Descripion 이 바뀔때는, React-Transition-Group 을 사용하여]
            마치 슬라이드 되듯 넘어가는 화면을 구축해보자

                
        < 워크 플로우 >

            [HowToWorkOut Page]
                    |
                    |---- choose-parts.tsx          // 기본
                    |
                    |---- 0. default-description.tsx   // 기본 (버튼 선택 전까지)
                    |
                    |
                    |---- 1.chest-part-description  // 버튼선택시
                    |       * (0.all-parts-description.module.css) // css동일
                    |           |
                    |           |
                    |           ---- DesCard.tsx (동적 카드)
                    |       
                    |
                    |---- 2.back-part-description   // 버튼선택시
                    |       * (0.all-parts-description.module.css)  // css동일
                        ...

6. 변환 동작 구현 [ 총 코드 정리]

    [1. 리덕스툴킷 슬라이스 "store/choose-part-slice.tsx" ]

        import { createSlice } from "@reduxjs/toolkit";

        export type PartState = {       // 반드시 객체안에, 한번 담아서, 한번에 초기화가 가능하게 만든다.
            descriptionState: {         // State 를 reducer 에서 바로 사용하면 Proxy 가 생기는 오류가 발생한다.
                onDefaultPart: boolean;
                onChestPart: boolean;
                    ...
                onLegsPart: boolean;
                onGlutesPart: boolean;
            };
        };

        const initialState: PartState = {
            descriptionState: {
                onDefaultPart: true,
                onChestPart: false,
                    ...
                onLegsPart: false,
                onGlutesPart: false,
            },
        };

        const ChoosPartsSlice = createSlice({
            name: "choose-part",
            initialState,
            reducers: {
                ChestDescription(state) {
                    state.descriptionState = { ...initialState.descriptionState };  // State 를 바로 사용하지 않고, 한번 넣어 사용했기에 가능하다.
                    state.descriptionState.onDefaultPart = false;                   // 디폴트는 없애고
                    state.descriptionState.onChestPart = true;                      // 각각에 맞는 State 를 업데이트한다.
                },
                        ...
                LegsDescription(state) {
                    state.descriptionState = { ...initialState.descriptionState };
                    state.descriptionState.onDefaultPart = false;
                    state.descriptionState.onLegsPart = true;
                },
                GlutesDescription(state) {
                    state.descriptionState = { ...initialState.descriptionState };
                    state.descriptionState.onDefaultPart = false;
                    state.descriptionState.onGlutesPart = true;
                },
            },
        });

        export const ChooseActions = ChoosPartsSlice.actions;

        export default ChoosPartsSlice.reducer;

    [2. 스토어 생성 "store/index.tsx" ]
        import { configureStore } from "@reduxjs/toolkit";
        import choosePartSlice from "./choose-part-slice";

        export const store = configureStore({
            reducer: { choosePart: choosePartSlice },
        });

        export type RootState = ReturnType<typeof store.getState>;
        export type AppDispatch = typeof store.dispatch;

    [3. 스토어 등록 "index.tsx"]

        import ReactDOM from "react-dom/client";
        import "./index.css";
        import App from "./App";
        import { BrowserRouter } from "react-router-dom";
        import Layout from "./components/UI/layout/layout";
        import { Provider } from "react-redux";
        import { store } from "./store";

        const root = ReactDOM.createRoot(
        document.getElementById("root") as HTMLElement
        );
        root.render(
            <Provider store={store}>
                <BrowserRouter>
                <Layout>
                    <App />
                </Layout>
                </BrowserRouter>
            </Provider>
        );


    [4. 파트 선택 컴포넌트 "components/how-to-workout/choose-parts.tsx"]

        import styles from "./choose-parts.module.css";
        import { useCallback } from "react";
        import { useDispatch } from "react-redux";
        import { ChooseActions } from "../../store/choose-part-slice";

        const ChooseParts = () => {
            const dispatch = useDispatch();                     // dispatch 사용

            const onChestHandler = useCallback(() => {
                dispatch(ChooseActions.ChestDescription());     // useCallback 과 함께, actions, dispatch
            }, [dispatch]);
                        ...

            const onLegsHandler = useCallback(() => {
                dispatch(ChooseActions.LegsDescription());
            }, [dispatch]);
            const onGlutesHandler = useCallback(() => {
                dispatch(ChooseActions.GlutesDescription());
            }, [dispatch]);

            return (
                        ...

                <ul className={styles.select_parts}>
                    <li onClick={() => onChestHandler()}>       // 각각의 li 에 리스너 등록
                        <div className={styles.parts_text}>
                            <img src="/2.parts/torso.png" alt="torso" />
                            <p>가슴</p>
                        </div>
                        <div className={styles.parts_img}>
                            <img src="/2.parts/icons8-circled-right-100.png" alt="arrow" />
                        </div>
                    </li>
                            ...

                    <li onClick={() => onShoulderHandler()}>
                        <div className={styles.parts_text}>
                            <img src="/2.parts/shoulders.png" alt="back" />
                            <p>어깨</p>
                        </div>
                        <div className={styles.parts_img}>
                            <img src="/2.parts/icons8-circled-right-100.png" alt="arrow" />
                        </div>
                    </li>
                    <li onClick={() => onBicepsHandler()}>
                        <div className={styles.parts_text}>
                            <img src="/2.parts/biceps.png" alt="biceps" />
                            <p>이두</p>
                        </div>
                        <div className={styles.parts_img}>
                            <img src="/2.parts/icons8-circled-right-100.png" alt="arrow" />
                        </div>
                    </li>
                            ...

    [5. Page 에서, State 에 따라 다른 컴포넌트 렌더 "/pages/2.how-to-workout.jsx"]

        import ChooseParts from "../components/2.how-to-workout/choose-parts";
        import DefaultDes from "../components/2.how-to-workout/default-description";
        import ChestPartDes from "../components/2.how-to-workout/1.chest-part-description";
                        ...
        import LegsPartDes from "../components/2.how-to-workout/7.legs-part-description";
        import GlutesPartDes from "../components/2.how-to-workout/8.glutes-part-description";
   
        import { useSelector } from "react-redux";
        import { RootState } from "../store";

        const HowToWorkOut = () => {
            const chooseDescription = useSelector((state: RootState) => state.choosePart);  // state 를 빼서 사용

            return (
                <div>
                    <ChooseParts />
                    {chooseDescription.descriptionState.onDefaultPart && <DefaultDes />}
                    {chooseDescription.descriptionState.onChestPart && <ChestPartDes />}
                                ...
                    {chooseDescription.descriptionState.onLegsPart && <LegsPartDes />}
                    {chooseDescription.descriptionState.onGlutesPart && <GlutesPartDes />}
                </div>
            );
        };

        export default HowToWorkOut;

    [6. 렌더되는 Descripion "components/how-to-work-out/1.chest-part-description.tsx" ... 등]

            import DesCard from "../UI/descriptionCard/DesCard";        // 카드 아웃소싱
            import styles from "./0.all-parts-description.module.css";

            const ChestPartDes = () => {
                return (
                    <div className={styles.main_div}>
                        <DesCard
                            name={"벤치프레스"}
                            img={"/2.parts/do-parts/graham-mansfield-rkBkXqlfRRo-unsplash.jpg"}
                            des={[
                                { id: 1, text: "팔꿈치와 명치 사이의 수직 각도" },
                                { id: 2, text: "충분한 허리의 아치각도 유지하기" },
                            ]}
                            warn={[
                                { id: 1, text: "팔꿈치와 명치 사이의 수직 각도" },
                                { id: 2, text: "충분한 허리의 아치각도 유지하기" },
                            ]}
                        />
                    </div>
                );
            };

            export default ChestPartDes;

    [ 7. 실제로 화면에 보이는 [운동 방법 카드] "/components/UI/descriptionCard/DesCard.tsx"]

        import styles from "./DesCard.module.css";
        import { AnimationOnScroll } from "react-animation-on-scroll";

        export type Exr = {     // 타입 정하기
            name: string;
            img: string;
            des: { id: number; text: string }[];
            warn: { id: number; text: string }[];
        };

        const DesCard: React.FC<Exr> = (props) => {
            const { name, img, des, warn } = props;
            return (
                <div className={styles.main_card}>
                    <div className={styles.title_div}>
                        <p>{name}</p>
                    </div>

                    {/* Description Part */}

                    <div className={styles.main_desc_div}>
                        <ul className={styles.main_desc_text_ul}>
                            {des.map((item) => (
                                <li key={item.id}> {item.text}</li>
                            ))}
                        </ul>
                        <div className={styles.main_desc_img_div}>
                            <img src={img} alt={"img"}></img>
                        </div>
                    </div>

                    {/* Warning Part */}

                    <div className={styles.main_warning_div}>
                        <p> 유의사항</p>
                        <ul className={styles.main_warning_lists}>
                            {warn.map((item) => (
                                <AnimationOnScroll animateIn="animate__bounceIn" key={item.id}>     // 애니메이션 적용
                                    <li key={item.id}> {item.text}</li>
                                </AnimationOnScroll>
                            ))}
                        </ul>
                    </div>
                </div>
            );
        };

        export default DesCard;


7. 사진들 포토샵으로 용량 줄이기 완료

8. 소모 칼로리 페이지 시놉시스 정도 작성

9. 소모 칼로리 페이지 UI 작업 시작
    radio 버튼 사용해보았다.

10. 소모 칼로리 페이지, [계산 할 때마다 튀어오르는 애니메이션 버튼 만들기 with useEffect], 애니메이션 조절해보기(AnimatedCss 패키지 ), 로직 아웃소싱하기 

    < components / EstimateBMR.tsx > =============================================

        import { FormEvent, useEffect, useRef, useState } from "react";

        const EstimateBMR = () => {
            const [buttonStyle, setButtonStyle] = useState<string>(
                `${styles.answer_section_totalCal} animate__animated animate__bounce`       // 1. 시작은 바운스
            );                                                                              // ** module css와 global css 를 동시 사용


            useEffect(() => {
                setButtonStyle(
                `${styles.answer_section_totalCal} animate__animated animate__bounce`       // 2. 버튼스타일이 변경되면 바운스
                );
            }, [buttonStyle]);
            
            const justconsole = (event: FormEvent) => {
                event.preventDefault();
                setButtonStyle(`${styles.answer_section_totalCal}`);                        // 3. 제출하면, 바운스 제거
                            ...
            };

            return (
                        ...
                    <div>
                        <p className={styles.answer_section_textP}>
                            당신의 하루 소비 칼로리 량
                        </p>
                        <h1 className={buttonStyle}>{AMR} kcal</h1>     // 바운스 스타일
                    </div>

            );
        };

        export default EstimateBMR;

    <heper / calculate-logic.tsx > =============================================

        export const CalculateFunction = ( sex: number, age: number, weight: number, tall: number, activity: number ) => {
            let BMR;

            if (sex === 1) {
                BMR = 88.4 + 13.4 * weight + 4.8 * tall - 5.68 * age;
            } else {
                BMR = 447.6 + 9.25 * weight + 3.1 * tall - 4.33 * age;
            }
            const finalAMR = BMR * activity;

            return finalAMR;
        };


    <index.css> ============================================================

        /*  애니메이션  */

        .animate__animated.animate__bounce {        // 하나하나 조절
            --animate-delay: 0.1s;
            --animate-duration: 700ms;
        }

        :root {     // 전부 조절

        }

11. 칼로리 소모 페이지 UI 작업 끝

12. 길게 hr 만들었는데, 화면을 튀어나가버린다. 어떻게하지?

    ==> 그린 라인을 씌우는 div 를 만들어서 overflow를 넣는다.

        /* 크로스 라인  Green-rotate */

                .cross_line_green_rotate {
                    position: relative;
                    background-color: var(--loss-weight-parts-intro-background-color);
                    height: 3rem;
                    margin: 1.5rem 0;
                    border: none;
                    z-index: 2;
                    opacity: 0.8;
                    transform: rotate(-5deg);
                    width: 110%;
                    margin-left: -2rem;
                }


        // 크로스 그린 라인 div  [ 여러개의 크로스 라인 포함된 div ]

                .cross_line_div {
                    width: 100%;
                    overflow: hidden;
                    height: 20rem;
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                }


13. 식단 알아보기 페이지 작업 시작


14. [ 데이터를 넣으면 자동으로 Card 가 만들어지는 페이지 작성]  식단 알아보기 페이지에서, 

    1) "FoodCard 작성"

        < UI / foodsCard / food-previewcard.tsx >

            import styles from "./food-previewcard.module.css";

            const FoodPreview: React.FC<{                       // 받아올 값들, 타입 지정
                id: number;
                img:string;
                category: string;
                title: string;
                majorNutri: string;
                nutri: string;
                price: number;
            }> = (props) => {
            const { id, img, category, title, majorNutri, nutri, price } = props;    // 받아올 값들

                return (
                    <div className={styles.main_div}>
                        <section className={styles.img_section}>
                            <img src={img} />                       // 이미지
                            <div className={styles.img_section_category}> {category}</div>  // 카테고리
                        </section>
                        <section className={styles.info_section}>
                            <div className={styles.info_section_title}>
                                <p> {title}</p>     // 타이틀
                            </div>
                            <div className={styles.info_section_info_detail}>
                                <div className={styles.info_section_info_detail_category}>
                                    {majorNutri}        // 메이저뉴트리
                                </div>
                                <div className={styles.info_section_info_detail_nutri_price}>
                                    <p> {nutri}</p>     // 뉴트리
                                    <p> {price}</p>     // 가격
                                </div>
                            </div>
                        </section>
                    </div>
                );
            };

            export default FoodPreview;

    2) "ListData 를 넘겨준다."

        < components / 4.find-foods / 1.Foods-List.tsx >

            import FoodPreview from "../UI/foodsCard/food-previewcard";
            import { useState } from "react";
            
            interface FoodType {        // 넘겨줄 FoodType 지정
                id: number;
                img:string;
                category: string;
                title: string;
                majorNutri: string;
                nutri: string;
                price: number;
            }
            
            const FoodsList = () => {        // 추후 FireBase DB 에서 fetch 해서 가져오도록 하자. 일단 샘플 데이터 두개
                                            // 또한, 자동 Grid 를 통해, 자동 Grid 조정을 하게 만든다. (블로그참조)

            const [foodsData, setFoodsData] = useState<FoodType[]>([        // "타입 지정 후" 일단 더미데이터 두개만 집어넣었다.
                {
                    id: 1,
                    category: "다이어트",
                    img:"/4.foods/claudio-schwarz-4qJlXK4mYzU-unsplash.jpg",
                    title: "최고의 단백질 보충제 닭가슴살",
                    majorNutri: "단백질+",
                    nutri: "Protein 22g",
                    price: 1000,
                },
                {
                    id: 2,
                    category: "벌크업",
                    img:"/4.foods/claudio-schwarz-4qJlXK4mYzU-unsplash.jpg",
                    title: "최고의 지방 보충제 아보카도",
                    majorNutri: "지방+",
                    nutri: "Fat 15g",
                    price: 2000,
                },
                ]);

                return (
                    <div>
                        {foodsData.map((food) => (          // Array.map() 을 통해, 모든 데이터를 한번에 넘기도록 한다.
                            <FoodPreview
                                key={food.id}
                                id={food.id}
                                img={food.img}
                                category={food.category}
                                title={food.title}
                                majorNutri={food.majorNutri}
                                nutri={food.nutri}
                                price={food.price}
                            />
                        ))}
                    </div>
                );
            };
            export default FoodsList;
            
    3) 자동 Grid 형태의 CSS 작성

        .main_grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(27rem, 1fr));
        }
        
    4) 우측에 div 위치 calc 를 통해, 잘 조절

        .select_category {
            margin-left: calc(100% - 27rem);

    * 그냥 65% 따위로 하면, div 의 width 때문에, 줄이면 넘어간다.

15. 버튼 누르면 [ 양옆으로 하이라이트가 부드럽게 움직이는 ] 셀렉터 만들기

    < 컴포넌트 >
  
        const FoodsList = () => {
        
            const [selected, setSelected] = useState<string>("탄수화물");
            const [foodsData, setFoodsData] = useState<FoodType[]>([
            {
                id: 1,
                        ...
                price: 1000,
            },
            {
                id: 2,
                        ...
            }
            ]);
        
            let selected_style = styles.selected_hydro;     // 초기 하이라이트 백그라운드 조건
            let text_highlight_hydro = "";                  // 초기 텍스트 조건
            let text_highlight_protein = "";                // 초기 텍스트 조건
            let text_highlight_fat = "";                    // 초기 텍스트 조건
        
            if (selected === "탄수화물") {
                selected_style = styles.selected_hydro;                 // 선택시 클래스 변경 (하나의 div 좌우로 움직임)
                text_highlight_hydro = styles.selected_text_hydro;      // 선택시 해당 클래스 이름 생성 ( 각각이 선택되면 각각에서 따로 켜짐 )
            }
            if (selected === "단백질") {
                selected_style = styles.selected_protein;
                text_highlight_protein = styles.selected_text_protein;
            }
            if (selected === "지방") {
                selected_style = styles.selected_fat;
                text_highlight_fat = styles.selected_text_fat;
            }
            return (
                <div className={styles.main_div}>
                    <ul className={styles.select_category}>
                
                        <div className={selected_style}></div>                  // 움직이는 백그라운드 div 

                        <li onClick={() => setSelected("탄수화물")}>
                            <p className={text_highlight_hydro}>탄수화물</p>    // 선택되면 적절한 className 이 켜진다.
                        </li>
                        <li onClick={() => setSelected("단백질")}>
                            <p className={text_highlight_protein}>단백질</p>
                        </li>
                        <li onClick={() => setSelected("지방")}>
                            <p className={text_highlight_fat}>지방</p>
                        </li>
                    </ul>
    < CSS >

            /* 하이라이트 Div 조건1 - 탄수화물  */
            .selected_hydro {
                position: absolute;
                width: 8rem;
                height: 2.5rem;
                z-index: 1;
                background-color: white;
                margin-right: 18rem;
                border-radius: 5px;
                transition: all 400ms ease-out;
                box-shadow: 1px 1px 4px black;
            }

            /* 하이라이트 Text 조건1 - 탄수화물  */
            .selected_text_hydro {
                font-weight: 600;
                font-size: 1.1rem;
                transition: all 600ms ease-out;
            }

            /* 하이라이트 Div 조건2 - 단백질  */
            .selected_protein {
                position: absolute;
                width: 8rem;
                height: 2.5rem;
                z-index: 1;
                background-color: white;
                border-radius: 5px;
                transition: all 400ms ease-out;
                box-shadow: 1px 1px 4px black;
            }

            /* 하이라이트 Text 조건2 - 단백질  */
            .selected_text_protein {
                font-weight: 600;
                font-size: 1.1rem;
                transition: all 600ms ease-out;
            }

            /* 하이라이트 Div 조건3 - 지방  */
            .selected_fat {
                position: absolute;
                width: 8rem;
                height: 2.5rem;
                z-index: 1;
                background-color: white;
                margin-left: 18rem;
                border-radius: 5px;
                transition: all 400ms ease-out;
                box-shadow: 1px 1px 4px black;
            }

            /* 하이라이트 Text 조건3 - 지방  */
            .selected_text_fat {
                font-weight: 600;
                font-size: 1.1rem;
                transition: all 600ms ease-out;
            }

16. 선택한 Selected 를 바탕으로 [선택된 Data 만 따로 화면에 띄우기]


        const [selected, setSelected] = useState<string>("탄수화물");
        const [foodsData, setFoodsData] = useState<FoodType[]>([
            {
                id: 1,
                        ...
                price: 1000,
            },
            {
                id: 2,
                        ...
            },
        ]);

        const [selectedFoods, setSelectedFoods] = useState<FoodType[]>([]);   // filter 될 FoodData

        useEffect(() => {       // filter 되는 로직
            setSelectedFoods(foodsData.filter((food) => food.majorNutri === selected));
        }, [selected]);

        return (
            <div className={styles.main_grid}>
                {selectedFoods.map((food) => (      // "selectedFoods" 로 Data 변경
                    <FoodPreview
                    key={food.id}
                    id={food.id}
                        ...
                    )


    ** 반드시 useEffect 를 사용하도록 하자.
    ** "추후 데이터"는, "FireBase" 에서 온 것을 "App.tsx" 에서 받아서, "리덕스 툴킷" 으로 넘긴 다음, 사용 할 것이다.

17. 파이어베이스로 DB 만들기 

    1) 운동방법

        [how-to-workout Page] -> [8개의 부위 Component 들] -> [각 Item은 DesCard 에 데이터]

        DB "exercise"
            // part : chest, back, shoulders, biceps, triceps, abs, legs, glutes
            //  part, name, img, des:[id, text], warn:[id,text]
            [ {part:chest, name:체스트프레스, img:"...", 
                des  : [{id:1, text:"..."}, {id:2, text:"..."}], 
                warn : [{id:1, text:"..."}, {id:2, text:"..."}],
              },
              {part:back, name:풀업, img:"...", 
                des  : [{id:1, text:"..."}, {id:2, text:"..."}], 
                warn : [{id:1, text:"..."}, {id:2, text:"..."}],
              },
              {part:triceps, name:킥백, img:"...", 
                des  : [{id:1, text:"..."}, {id:2, text:"..."}], 
                warn : [{id:1, text:"..."}, {id:2, text:"..."}],
              },
            
            ]

    2) 음식 리스트

        DB "foods"
            // category : 다이어트, 벌크업, 린매스업
            // majorNutri : 단백질, 지방, 탄수화물
            // id : f1, f2 ...
            // nutri : 지방 15g ...
            // price : 1000 ...
            // id / img / category / title / majorNutri / nutri / price

[17-1. 파이어베이스에 마이그레이션 하는게, 너무 힘들어서, 페이지만든다.]

        // 아이디 :  e1, e2 ...
        // 파트 : chest, back, shoulders, biceps, triceps, abs, legs, glutes
        // des : [{id:1, text:"..."}, {id:2, text:"..."}]
        // warn : [{id:1, text:"..."}, {id:2, text:"..."}]

        import { FormEvent, useState, useRef } from "react";
        import styles from "./add-exercise.module.css";
        import { postExercise } from "../../helper/add-exercise-fetch";

        const AddExercise = () => {
            const desTextRef = useRef<HTMLInputElement>(null);
            const warnTextRef = useRef<HTMLInputElement>(null);

            const [id, setId] = useState<string>("");
                        ...
            const [warn, setWarn] = useState<{ text: string }[]>([]);

            const AddDes = (event: FormEvent) => {              // description Array 추가
                event.preventDefault();
                const desText = desTextRef.current!.value;

                setDes([...des, { text: desText }]);

                desTextRef.current!.value = "";
            };

            const AddWarn = (event: FormEvent) => {             // warning Array 추가
                event.preventDefault();
                const warnText = warnTextRef.current!.value;

                setWarn([...warn, { text: warnText }]);

                warnTextRef.current!.value = "";
            };

            const submitHandler = async (event: FormEvent) => {     // fetch 시작
                event.preventDefault();

                const exerciseData = { id, part, name, img, des, warn };    // fetch 할 데이터
                await postExercise(exerciseData);                // "fetch 아웃소싱"
                setId(() => "");                                // 초기화
                        ...
                setDes(() => []);
                setWarn(() => []);
            };

            return (
                <div className={styles.main_div}>
                    <form onSubmit={submitHandler}>
                        <div>
                            <label htmlFor="id"> 아이디 </label>
                            <input
                                placeholder="e1,e2..."
                                    ...
                            <label htmlFor="name"> 운동이름 </label>
                            <input
                                placeholder="벤치 프레스, 킥 백, 숄더 프레스..."
                                type={"text"}
                                id="name"
                                value={name}
                                onChange={(e) => setName(e.target.value)}
                            />
                        </div>
                                ...
                        <div>
                            <label htmlFor="des"> 설명 </label>
                                    ...
                            <label htmlFor="warn"> 유의사항 </label>
                                <input
                                    placeholder="1.xxx, 2.xxx ..."
                                    type={"text"}
                                    id="warn"
                                    ref={warnTextRef}
                                    style={{ width: "25rem" }}
                                />
                                {warn.map((item) => (
                                    <p key={item.text}>{item.text}</p>
                                ))}
                                <button onClick={AddWarn}> 추가 </button>
                        </div>
                        <div>
                            <button> 제출</button>
                        </div>
                    </form>
                </div>
            );
        };

        export default AddExercise;


18. 데이터 마이그레이션 끝

